paths:
  /api/users:
    get:
      summary: Get all users
      tags:
        - Users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/createUser'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request    
  /api/users/{uid}:
    get:
      summary: Get user by ID
      tags:
        - Users
      parameters:
        - in: path
          name: uid
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not Found
    put:
      summary: Update user by ID
      tags:
        - Users
      parameters:
        - in: path
          name: uid
          required: true
          schema:
            type: string
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/createUser'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not Found
    delete:
      summary: Delete user by ID
      tags:
        - Users
      parameters:
        - in: path
          name: uid
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
                

components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          description: User ID
        first_name:
          type: string
          description: First name
        last_name:
          type: string
          description: Last name
        email:
          type: string
          description: Email
        password:
          type: string
          description: Password
      example:
        _id: '5f5f9b3b7f3b4b001f3b4b00'
        first_name: John
        last_name: Doe
        email: john@email.com
        password: password
  requestBodies:
    createUser:
      type: object
      properties:
        first_name:
          type: string
          description: First name
        last_name:
          type: string
          description: Last name
        email:
          type: string
          description: Email
        password:
          type: string
          description: Password
      example:
        first_name: John
        last_name: Doe
        email: john@email.com
        password: password